{ 상속 }
상속( lnheritance )
-> 기본의 클래스로 새로운 클래스를 작성하는 것. (코드의 재사용)
-> 두 클래스를 부모와 자식으로 관계를 맺어주는 것.
-> 자손은 조상의 모든 멤버를 상속받는다. (생성자, 초기화블럭 제외)
-> 자손의 멤버 개수는 조상보다 적을 수 없다. (같거나 많다.)
-> 자손의 변경은 조상에 영향을 미치지 않는다.

class 자식클래스 extends 부모클래스{ // ... }

class Chid extends Parent {}
// Parent <--- Child


Ex> class Parent{ int age; }
      class Child extends Parent {
          System.out.println("놀자~"); // 새로운 멤버 추가
      }  // 자식 안에 부모가 있다???
// Child는 자신 멤버 + 상속받은 것 >= 조상클래스


상속을 받는 것과 안 받는 것의 대한 차이점
-> 결과적으로는 변화가 없다.
-> 보모클래스의 변화가 있으면, 자식클래스는 변화가 있다.


{ 클래스 간의 관계 상속과 포함 }
1. 포함관계
포함(composite)이란?
-> 클래스의 멤버로 참조변수를 선언하는 것.
-> 작은 단위의 클래스를 만들고, 이 들은 조합해서 클래스를 만든다.

class Circle {
    Point c = new Pont( );
    int r ;
}   // 저장공간은 차이가 없지만, 저장구조가 다르다.
       -> c . c . x ( 그리고 복잡도가 줄어든다? )


// 클래스의 관계 = 1. 상속 2. 포함
   상속관계 -> '~은 ~이다.(is-a)' 
   포함관계 -> '~은~을 가지고 있다. (has-a)' 

( 포함 )
class Circle{
    Point c =new Pont();
    int r;
}

( 상속 )
class Circle extends Point{
    int r;
}
// 프로그래밍 = 설계(90%) + 코딩(10%)



{ 단일 상속 Object클래스 }
단일 상속(Single lnheritance)
-> java는 단일상속만을 허용한다. (c++은 다중상속 허용)
// 단일상속 -- 하나의 부모만 상속
class TvDVD extneds Tv, DVD { // ... }  // 에러 조상은 하나만 허용.
-> 모든 클래스는 Object클래스에 정의된 11개의 메서드를 상속.
toString(), equals(Object obj), hashCode(), ...


//   비중이 높은 클래스 하나만 상속관계로,
     나머지는 포함관계로 한다.

class TvDVD extends TV {
    DVD dvd = newDVD( );
    // ... 객체사용란 ...
}   //다중상속의 효과를 불러올 수 있다.


Object클래스 - 모든 클래스의 조상
-> 부모가 없는 클래스는 자동적을 Object클래스를 상속받게 된다.
[ 자동추가_부모가 없을 때, 컴파일이 어떻게 바뀌나면 ]
  class Tv        extends Object{ //... }
  class SmartTv extends Tv{ //... }


상속계증도
( Object ) <-- ( Tv ) <-- ( smartTv )



{ 오버라이딩  오버로딩VS오버라이딩 }
메서드 오버라이딩(overriding)
-> 상속받은 조상의 메서드를 자신에 맞게 변경하는 것.

오버라이딩의 조건
1. {선언부}가 조상 클래스의 메서드와 일치해야 한다.
2. {접근 제어자}를 조상 클래스의 메서드보다 
   좁은 범위로 변경할 수 없다.
3. {예외}는 조상 클래스의 메서드보다 많이 선언할 수 없다.
// 선언부       (반환타입, 메서드이름, 매개변수목록) 
// 접근제어자 (public, protected, (default), private)
// 예외         (IoException, SQLException)

class Point{ 
    int x, y; 

    String getLocation(){  // 선언부 입니다!!
        return "x: " + x + ", y: " + y;
    }
}

class Point3D extends Point {
    int z;

    String getLocation(){
        return "x: " + x + ", y: " + y + ", z: " + z;
    }
}

오버로딩 VS 오버라이딩
오버로딩(overloading)
-> 기본에 없는 새로운 메서드를 정의하는 것(new)
오버라이딩(overriding)
-> {상속}받은 메서드의 내용을 {변경}하는 것(change, modify)


class Parent{
    void parentMethod() {}
}

class Child{
    void parentMethod(){}         // 오버라이딩
    void parentMethod(int i){}    // 오버로딩
   ->  메서드는 그대로 있는데, 매개변수가 다른 경우

    void childMethod(){}           // 메서드 정의
    void childMEthod(int i){}      // 오버로딩
    void childMethod(){}           // 중복정의
}



{ 참조변수 super  ,  생성자 super( ) }

참조변수 super
-> 객체 자신을 가리키는 참조변수. 
    __인스턴스 메서드(생성자)내에만 존재
-> 조상의 멤버를 자신의 멤버와 구별할 때, 사용
// static메서드 내에서 사용불가
// super는 조상멤버, 자신멤버로 구별할때, 쓰임.

예제 2
class Parent { int x = 10; }      // super.x

class Child extends Parent {    // this.x
    int x = 20;
}

예제 3
class Parent2 { int x = 10; }    // super.x와 this.x 둘다 가능!

class Child2 extends Parent2 {
    void method(){
        System.out.println("x= " + x);
        System.out.println("this.x= " + this.x);
        system.out.println("super.x= " + super.x);
    }
}


super( ) __ 조상과 생성자
-> 조상의 생성자를 호출할 때 사용
-> 조상의 멤버는 조상의 생성자를 호출해서 초기화
{추가조건}
-> 생성자의 첫 불에 반드시 생성자를 호출해야 한다.
-> 그렇지 않으면 컴파일러가 생성자의 첫 줄에 super();를 삽입
// 모든 생성자는 첫불에 다른 생성자를 호출한다.

class Point { 
    int x, y; 

    Point( int x, int y){
        this.x = x;
        this.y - y;
    }
}

class Point3D extends Point{
    int z;

    Point3D(int x, int y, int z){
        super(x, y);   // 조상클래스의 생성자 Point(int x, int y)를 호출
        this.z = z;    // 자신의 멤버를 초기화
    }
}



{ 패키지,  클래스 패스 }
패키지(package) 
-> 서로 관련된 클래스의 묶음 __ java8기분 약 4000클래스
-> 클래스는 클래스파일(*.class),
    패키지는 폴더.   ,  하위 패키지는 하위 폴더.
-> 클래스의 실제 이름(full name)은 패키지를 포함(java.lang.String)
    rt.jar는 클래스들을 압축한 파일(JDK설치경로\jre\lib에 위치)
// rt.jar -> runtime실행할때, 실행중
// jar은 (클래스 파일 묶어놓은 것)
--> java9부터 rt.jar 개념 사라짐  
이유 : java9부터 module개념 등장 -> rt.jar는 크다, 작은걸로 쪼개짐. 


패키지의 선언
-> 패키지는 소스파일의 첫 번째 문장으로 단 한번 선언
-> 같은 소스파일의 클래스들은 모두 같은 패키지에 속하게 된다.
-> 패키지 선언이 없으면 이름없는(unnamed)패키지에 속하게 된다.
// unnamed -> default package

클래스 패스(classpath)
-> 클래스 파일(*.class)의 위치를 알려주는 경로(path)
-> 환경변수 classpath로 관리하며, 경로간의 구분자는 ';'를 사용
-> classpath(환경변수)에 패키지의 루트를 등록해줘야 함.



{ import 문  ,  static import 문 }
import 문
-> 클래스를 사용할 때 패키지이름을 생략할 수 있다.
-> 컴파일러에게 클래스가 속한 패키지를 알려준다.
-> java.lang패키지의 클래스는 import하지 않고도 사용할 수 있다.
    String, Object, System, Thread ...

class ImportTest{
    java.util.Date today = new java.util.Date( );
}

import java.util.Date;
class ImportTest{
    Date today = new Date( );
}


import문의 선언
-> import문을 선언하는 방법은 다음과 같다.
import 패키지명.클래스명;     // "ctrl + shift + o"
OR
import 패키지명.*;
-> import문은 패키지문과 클래스선언의 사이에 선언한다.
// {패키지} 다음 {import문} 다음 {클래스}

--> import문은 컴파일 시에 처리되므로 프로그램의 성능에 영향없음.
--> 다음의 두 코드는 서로 의미가 다르다.
--> 이름이 같은 클래스가 속한 두 패키지를 import할 때는
      클래스 앞에 패키지명을 붙여줘야 한다.


static import문
-> static멤버를 사용할 때, 클래스 이름을 생략할 수 있게 해준다.
import static java.lang.Integer.*;      [* =모든 static멤버(변수, 메서드)] 
  // Integer클래스의 모든 static메서드
import static java.lang.Math.random;   
  // Math.random()만. 괄호 안붙임.
import static java.lang.System.out;     
 // System.out을 out만으로 참조가능.  [out == static변수]

// System.out.println(Math.random());
    <-> out.println(random());            이렇게 사용가능!!



{ 제어자 static, final, abstract }
제어자(modifier)
-> 클래스와 클래스의 멤버(멤버 변수, 메서드)에 부가적인 의미 부여

1. 접근 제어자
-> public, protected, (default), private
2. 그외
-> static, final, abstract, native, transient, 
    synchronized, volatile, strictfp


-> 하나의 대상에 여러 제아자를 가이 사용가능(접근 제어자는 하나만)
public class ModifierTest{
    public static final int WIDTH = 200;

    public static void main(String[] args){
        System.out.println("WIDTH="+WIDTH);
    }
}

// public static final = 접근제어자 + 그 외 + 그 외



static __ 클래스의, 공통적인

static 
1. 대상
-- 멤버변수
--> 모든 인스턴스에 공통적으로 사용되는 클래스 변수가 된다.
--> 클래스 변수는 인스턴스를 생성하지 않고도 사용 가능하다.
--> 클래스가 메모리에 로드될 때 생성된다.
-- 메서드
--> 인스턴스를 생성하지 않고도 호출이 가능한 static 메서드가 된다.
--> static메서드 내에서는 인스턴스멤버들을 직접 사용할 수 없다.


final __ 마지막의, 변경될 수 없는

final
1. 대상
-- 클래스
--> 변경될 수 없는 클래스, 확장될 수 없는 클래스가 된다.
      그레서 final로 지정된 클래스는 다른 클래스의 조상이 될 수 없다.
-- 메서드
--> 변경될 수 없는 메서드, final로 지정된 메서드는 오버라이딩을
      통해 재정의 될 수 없다,
-- 멤버변수, 지역변수
--> 변수 앞에 final이 붙으면, 값을 변경할수 없는 상수가 된다.

final class FinalTest{               // 조상이 될 수 없는 클래스
    final int MAX_SIZE = 10;     // 값을 변경할 수 없는 멤버변수(상수)

    final void getMaxSize(){      // 오버라이딩할 수 없는 메서드(변경불가)
        final int LV = MAX_SIZE; // 값을 변경할 수 없는 지역변수(상수)
        return MAX_SIZE;
    }
}


abstract __ 추상의, 미완성의

abstract
1. 대상
-- 클래스
--> 클래스 내에 추상 메서드가 선언되어 있음을 의미한다.
-- 메서드
--> 선언부만 작성하고 구현부는 작성하지 않은 추상 메서드임을
     알린다.

abstract class AbstractTest{   // 추상클래스(추상 메서드를 포함한 클래스)
    abstract void move( );      // 추상메서드(구현부가 없는 메서드)
} //미완성클래스

미완성클래스 -> 제품생성 불가
AbstractTest a = new AbstractTest( ); 
// error,  추상클래스의 인스턴스 생성불가..

추상클래스가 객체를 생성하는 방법
-> 추상클래스를 상속을 통해서 완전한 클래스를 만들 후에 
    객체생성가능
// 완성된 설계도 -> 구상,구체 클래스


{ 접근 제어자 }
접근 제어자(access modifier)
1. private      -> 같은 클래스 내에서만 접근이 가능하다.
2. (default)    -> 같은 패키지 내에서만 접근이 가능하다.
3. protected  -> 같은 패키지 내에서.  AND 
                      다른 패키지의 자손클래스에서 접근이 가능하다.
4. public       -> 접근 제한이 전혀 없다.


제어자         같은 클래스       같은 패키지      자손클래스       전체
public                O                   O                   O               O
protected           O                    O                   O 
(default)              O                   O
private               O


접근제한없음      같은패키지+자손       같은패키지      같은 클래스
public            >    protected          >    (default)    >    private



{ 캡슐화 }
캡슐화와 접근 제어자

접근 제어자를 사용하는 이유
-> 외부로부터 데이터를 보호하기 위해서
-> 외부에는 불필요한, 내부적으로만 사용되는, 부분을 감추기 위해서



{다형성(polymorphism)}
-> 여러 가지 형태를 가질 수 있는 능력
-> 조상 타입 참조 변수로 자손 타입 객체를 다루는 것
// 하나가 여러가지 형태를 가질 수있다.

// Tv t = new SmartTv( ); --> 타입 불일치 가 OK?? //

class Tv {
    boolean power;
    int channel;

    void power( ) {power = !=power;}
    void channelUp( ) {++channel;}
    void channelDown( ) {--channel;}
}

class smartTv extends Tv{
    String text;
    void caption( ) { }
}

-> 객체와 참조변수의 타입이 일치할 때와 일치하지 않을 때의 차이?
SmartTv s = new SmartTv( );  
//--> 참조 변수와 인스턴스의 타입이 일치
Tv         t = new SmartTv( );  
//--> 조상 타입 참조변수로 자손 타입 인스턴스 참조
--> Tv t == 조상 타입의 참조변수


다형성(polymorphism)
-> 자손 타입의 참조변수로 조상 타입의 객체를 가리킬 수 없다.
Tv         t = new SmartTv();   // OK.   허용
SmartTv s = new Tv();           // error 허용 안됨.


Q. 참조변수의 타입은 인스턴스의 타입과 반드시 일치해야 하나요?
A. 아닙니다. 일치하는 것이 보통이지만, 일치하지 않을 수도 있습니다.

Q.참조변수가 조상타입일 때와 자손타입일 때의 차이?
A. 참조변수로 사용하는 멤버 변수의 갯수가 다릅니다.

Q.자손 타입의 참조변수로 조상 타입의 객체를 가리킬 수 있나요?
A. 아니요. 허용되지 않습니다.
// 조상이 5개 < 자손7개 허용  ,  조상이7개 < 자손5개 허용 안됨!!


{ 침조변수의 형변환 }
-> 사용할 수 있는 메버의 갯수를 조절하는 것.
-> 조상 자손 관계의 참조변수는 서로 형변환 가능
// 허나 형제관계에서는 형변환이 불가능하다???

class Car{ }
class FireEngine etends Car{ }
class Ambulance extends Car{ }

FireEngine f = new FireEngine();
Car c = (Car)f;
// f는 FireEngine이다.  
// Car과 Engine의 타입이 불일치하기 때문에 일치시켜준다.
Ambulance a = (Ambulance)f;


car = fe;
// fe값을 car에 넣었다??

--> 5개->4개 (감소) 안전!!
--> 4개->5개 (중가) 안전하지 않음 -> 형변환 생략불가


{ 참조변수 형변환(2) }

fe.water();
car = fe;
car.water(); --> 이거 안되!! 
그래서
fe2 = (FireEngine)car;
// --> 형변환 생략불가 [자손타입 <- 조상타입]
fe2 = (FireEngine)car;
fe2.water(); 

// NullPointerException 발생?? --> null.drive
// 실제 인스턴스가 무엇인지가 중요!.

// FireEngine fe2 = (FireEngine)null // 조상 -> 자손으로 형변환
// Car car2 = (Car)fe2; // 자손 -> 조상 으로 형변환
정리 -> 실제객체의 중요 -> 객체의 멤버 갯수를 확인하여
                                     참조변수의 멤버갯수를 변화할 수 있다.

사용 예시
FireEngine fe = (FireEngin)c;
// 컴파일 ok -> 형변환하지 않으면, java.lang.ClassCastException



{ instanceof 연산자 }
-> 참조변수의 형 변환 가능여부 확인에 사용.
-> 가능하면 true 반환
-> 형변환 전에 반드서 instanceof로 확인해야 함.
// 형변환 가능 여부는 = 조상 <--> 자손이다.


1. 확인한다. 형변환 해도 되는지 // instanceof 사용한다.
2. 형변환

void doWork(Car c){
     if(c instanceof FireEngine){            // 1. 형변환이가능한지 확인
         FireEnfine fe = (FireEnfine)c;      // 2. 형변환
        fe. water();
    }
}

클래스의 계층구성도
최고조상 Object -> 조상 Car -> 자손 FirdEngine
--> 자신기준 조상계층은 instaneof 할때 true이 나온다.
// 조상계층 타입으로 형변환이 가능하다는 이야기 입니다.

System.out.println(fe.instanceof Object);
System.out.println(fe.instanceof Car);
System.out.println(fe instanceof FireEngine);
// 이것의 의미는 fe는 오른쪽타입으로 형변환이 가능하다는 의미


Q. 참조변수의 형변환은 왜 하나요?
A. 참조변수(리모콘)을 변경함으로써 사용할 수 있는 
    멤버의 갯수를 조절하기 위해서

FireEnfine f = new FireEngine();
Car c = (Car)f;
// 형변환은 타입을 일치시킬려고 참조변수의 형변환한다.


Q. instanceof연산자는 언제 사용하나요?
A. 참조변수를 형변환하기 전에 형변환 가능여부를 확인할 때,

void doWork(Car c){
    if(c instanceof FireEngine){
        FireEngine fe = (FireEngine)c;   //1. 형변환이 가능한지 확인
        fe/water();                           //2. 형변환
    }
}


{ 매개변수의 다형성 }__ 다형적 매개 변수
-> 참조형 매개변수는 메서드 호출시,
    {자신과 같은 타입 또는 자손타입}의 인스턴스를 넘겨줄 수 있다.

ㅇㅇㅇㅇㅇ


매개 변수의 장점
1. 다형적 매개변수
2. 하나의 배열로 여러종류 객체 다루기


다형성 
1. Tv t - new SmartTv();
2. 참조변수의 형변환 -- 리모콘 바꾸기
                               사용가능한 멤버갯수로 전환
3. instaneof 연산자   -- 형변환 가능여부확인


{ 매개변수의 다형성 장점 }__ 다형적 매개변수 편.
메소드 이름이 같고, 매개변수가 다른것 -> 오버로딩!!

만약 다른 물건을 사려면?
-> 오버로딩을 한다??
--  물건을 사려는 대상이 많기 때문에

void buy(Tv t){
    money -= t.price;
    bonusPoint += bonusPoint;
} // 이 메서드를 아래처럼 바꿔주면

void buy(Product p){
    money -=p.price;
    bonusPoint += p.bonusPoint;
} // 이 메서드 하나로 여러 물건을 살 수 있습니다!!

Product p1 = new Tv();
Product p2 = new Computer();
Product p3 = new Audio();
--> 이것은 다형의 장점 첫 번째 입니다 // 다형성 매개변수!!

Ex.7_8에서 확인할 수 있습니다.
// super() -> 조상의 생성자를 가지고 온다.

// Product (int price){
    this.price = price;
    bonusPoint = (int)(price/10.0);
}  // iv인스턴스 입니다!


b.buy(new Tv());
// 이것은 Product p = new Tv1;
   으로 생각해주면 된다.

이유: 참조변수 b는 Tv객체를 가리켜준다.
       Tv객체 안에 buy라는 메서드가 있어 
       참조변수의 메서드는 Project p 가 객체 Tv가 된다.



{ 참조변수 다형성 장점}__여러 종류의 객체를 배열로 다루기편 
-> 조상타입의 배열에 자손들의 객체를 담을 수 있다.

Product p[] = new Product[3];
Product p1 - new Tv();
// 이것을 한 번 비교해볼까요???
ex> Product p{n} = new Tv();


// 다형성의 장점_여러 종류의 객체를 배열로 다루기
-> 한 변수의 배열의 값을 여러개의 객체로 저장할 수 있다.
--> java는 다형성을 지원하기 때문에 여러개의 제품을 넣을 수 있음



public class Vector extends AbsreactList 
// vector 클래스은 가변 배열기능 있는 클래스.
-> 모든 종류의 객체를 저장할 수 있다?
// Object elementData[]; 
// 일단 object는 모든 종류의 객체를 저장한다고 생각을 하자!!

public static void main(String args[]){
    Buyer b = new Buyer2();

     b.buy(new Tv2());
     b.buy(new Computer2());
     b.buy(new Audio2());
}

// 참조변수 b는 객체 Buyer2를 가리킨다.
   여기로 참조변수의 형은 일치하기때문에 형변환 가능하다.
   
// 참조변수가 가리키는 객체의 메소드는 
   조상을 가리켜  실행을 한다.



{ 추상클래스  && 추상 메서드 }

추상 클래스(abstract class)
-> 미완성 설계도. 미완성 메서드를 갖고 있는 클래스
// 미완성 설계도 -> 부족한 설계도
    멤버가 적거나, 단순히 미완성 메서드를 가지고 있는 경우

[abstract] class Player{  //추상클래스 (미완성 클래스)
    abstract void play(int pos); 
     // 추상메서드(몸통{ }이 없는 미완성 메서드)
    abstract void stop(); 
     // 추상메서드 
}


-> 다른 클래스 작성에 도움을 주기 위해 생성. 인스턴스 생성 불가
Player p = new Player();  //error 추상클래스의 인스턴스 생성 불가

도움을 주기 위해서
-> 상속을 통해 추상 메서드를 완성해야 인스턴스 생성가능
class AudioPlayer extends Player{
    void play(int pos){  }                 // 추상메서드를 구현
    void stop( ){  }                         // 추상메서드를 구현
--> 더이상 추상클래스가 아니기 때문에 abstract를 써주지 않는다.
     완성된 설계도...
}
AudioPlayer ap = new AudioPlayer();  // OK입니다.
// 몸통을 만드는 것을 구현이라고 한다.


추상 메서드(abstract method)
-> 미완성 메서드.
-> 구현부(몸통, { })가 없는 메서드
// 메서드 = 선언부 + 구현부{ }
    --> 추상메서드는 구현부 부분이 없다.!!

 abstract 리턴타입 메서드이름(); 
// abstract == 제어자
-> 꼭 필요하지만 자손마다 다르게 구현 될 것으로 예상되는 경우
    추상메서드를 사용한다.


// 만일 크래스를 상속받은 추상클래스는
   클래스 내에 존재하는 모든 메서드를 입력해야
   완전한 클래스가 된다. 
   허나 한개라도 빠진 메서드가 있으면 추상클래스가 된다.

abstract class Player{
    abstract void play(int pos);
    abstract void stop();
}

abstract class AbstractPlayer extends Player{
    void play(int pos){}
    abstract void stop();
}


추상클래스의 실질적의 예시)

abstract class player{
    boolean pause;
    int currentPos;

    Player(){
        pause = false;
        currentPos = 0;
    }
    abstract void play(int pos);
    abstract void stop();

    void play(){
        play(currentPos);
    } // 상속을 통해 메서드를 호출할 때, 사용이 가능하다!
}
// 인스턴스 메서드는 객체생성 후에 호출할 수 있다.


// 다시정리
1. 상속을 통해 자손 메서드를 호출
2. 자손객체 생성




{ 추상 클래스의 작성(1) }

추상클래스의 작성
-> 여러 클래스에 공통적으로 사용될 수 있는 추상클래스를 
    바로 작성하거나 
    기본 클래스의 공통 부분을 뽑아서 추상클래스를 만든다.

-> 선언부는 일치하지만, 구현부는 다르다??
     공통부분을 추출하여 Unit이란 클래스로 정의 했다????

-> unit는 조상으로 나누고 자손들이 구현을 한다.


abstract class Unit{}
class Marine extends Unit{}
class Tank extends Unit{}
class Dropship extends Unit{}

Unit[] group = new Unit[3];
group[0] = new Marine();
group[1] = new Tank();
group[2] = new Dropship();
-> 여러종류의 유닛을 하나의 배열에 담아서 한번에 이동.
// 이렇게 될 수 있는 이유는 다형성이란 것 때문이다.!!

for(int i =0; i< group.length; i++) froup[i].move(100,200);

// 다시정리
1. int 와 int[]의 차이점
-> int 는 기본형의 정수형
-> int[]는 참조형의 배열타입 



{ 추상 클래스의 작성(2) }

추상클래스의 작성
->  추상화[불명확, 애매하다] <---> 구체화 [명확, 구체적]
추상화된 코드는 구체화된 코드보다 유연하다. --> 변경에 유리.

GregorianCalendar cal = new GregorianCalendar( );    // 구체적
Calendar cal = Calendar.getInstance( );                    // 추상적
----> Calendar 자손객체를 반환 --> 이것은 불분명하다.

public static Calendar getInstance(Local aLocale){
    return createCalendar(TimeZone.getDefault(), aLocale);
}

private static Calendar createCalendar(Timezone zone, Locale aLocale)
{
if(caltype != null){
        switch(caltype){
            case "buddhist": cal = new BuddhistCalendar(zone, aLocale);
        }
    }
}



{ 인터페이스의 선언, 상속, 구현 }

인터페이스(interface)
-> 결론__추상 메서드의 집합 (프로그래밍 관점)
-> 핵심__구현된 것이 전혀 없는 설계도. 껍데기(모든 멤버가 public)
     밖에 노출되어 있기 때문에 모든 멤버가 public이다.

부수적인 것 --> static메서드, 상수, 디폴트 메서드


인터페이스와 추상클래스의 차이점
1. 추상클래스 -> 일반클래스인데, 추상 메서드를 가지고 있다.
2. 인터페이스 -> 추상메서드만 있는거 (구현된 것이 없는 설계도)


프로그래밍 관점의 인터페이스(interface)
interface 인터페이스이름{
    public static final 타입 상수이름 = 값;          // 상수
    public abstract 메서드이름 (매개변수목록);    // 추상메서드
}

Ex>
interface PlayingCard{
    public static final int SPADE = 4;
    final int DIAMOND = 3;
    static int HEART = 2;
    int CLOVER = 1;
    // 상수__public static final 생략가능!!

    public abstract String getCardNumber();
    String getCardKind();
    //추상 메서드__public abstract 생략가능!!
}


인터페이스의 상속
-> 인터페이스의 조상은 인터페이스만 가능(Object가 최고 조상 아님)
-> 다중 상속이 가능.(추상메서드는 충돌해도 문제 없음)
// 다중 상속은 조상이 여러개 존재한다는 것!!

interface Fightable extends Movable, Attackable { }

interface Movable{
    void move(int x, int y); __1개
}

interface Attackable{
    void attack(Unit u); __2개
}
// Fightable이 가지고 있는 메서드는 2개입니다.



인터페이스의 구현
-> 인터페이스에 정의된 추상 메서드를 완성하는 것.
    -- 미완성 설계도(인터페이스)를 
       완성(추상 메서드)하는 것을 의미한다.

    -- class 클래스이름 implements 인터페이스이름{}

-> 일부만 구현하는 경우, 클래스 앞에 abstract를 붙여야 함.
     -- abstract class Fighter implements Fightable{
            public void move(int x, int y){}
            public abstract void arrack(Unit u);
        }

     -- interface Fightable{
             public abstract move(int x, int y);
             public abstract arrack(Unit u);
        }


인터페이스 구현

Q. 인터페이스란?
A. 추상 메서드의 집합__ 그외 상수, static메서드, 디폴트 매서드

Q. 인터페이스의 구현이란?
A. 인터페이스의 추상메서드 몸통{}만들기(미완성 설계도 완성하기)

class AudioPlayer extends Player{
    void play(int pos){}
    void stop(){}
}  // 추상메서드를 구현

class Fighter implements Fightable{
    public void move(int x, int y){}
    public void sttack(Unit u){}
}  // 인터페이스를 구현

Q. 추상 클래스와 인터페이스의 공통점은?
A.추상 메서드를 가지고 있디.(미완성 설계도)

Q. 추상 클래스와 인터페이스의 차이점은?
A. 인터페이스는 iv를 가질 수 없다.


{ 인터페이스와 다형성 }
인터페이스를 이용한 다형성
-> 인터페이스도 구현 클래스의 부모?? YES

class Fighter extends {Unit} implements {Fightable}{
    public void move(int x, int y){}
    public void attack(Fightable f){}
}  //다중상속문제(충돌??)

Unit       u = new Fighter();
Fightable f = new Fighter();


interface Fightable{
    void move(int x, int y);
    void attack(Fightable f);
}  //Fightable인터페이스를 구현한 클래스의 인스턴스만 가능


-> 인터페이스를 메서드의 리턴타입으로 지정할 수 있다.
Fightable method(){
    Fighter f = new Fighter();
    return f;
}  //Fightable인터페이스를 구현한 클래스의 인스턴스를 반환.


1. class Fighter extends Unit implements Fightable{}
2. Fightable method(){
       Fighter f = new Fighter();
       return f;  // 인터페이스를 구현한 객체를 변환
   }

// 다시정리
--> Fightable f = new Fighter();
      == Fightable f = method(); // 위에랑 아래랑 같다!!
--> 이것이 인터페이스와 다형성이라는 것인가??? 두둥!!!~~~~

ㅇㅇㅇㅇㅇㅇ












