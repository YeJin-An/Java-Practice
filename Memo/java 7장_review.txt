// 클래스의 관계 (1)상속 (2)포함
[상속관계 '~은~이다.(ls-a)]
[포함관계 '~은~을 가지고 있다.(has-a)']

ch7-1 상속(lnheritance)
-> 기존의 클래스에 새로운 클래스로 작성(코드의 재사용)
-> 두 클래스를 부모와 자식으로 관계를 맺어주는 것
-> 자손은 조상의 모든 멤버를 상속받는다(생성자, 초기화블럭 제외)
-> 자손의 멤버 개수는 보상보다 적을 수 없다(같거나 많다.)
-> 자손의 변경은 조상에 영향을 미치지 않는다.

class Point{ int x;  int y; }
class Point3D extends Point{ int z; }
-> 상속은 객체와 참조변수를 그릴때, 차이점이 없습니다.


ch7-3 포함관계
class Circle {
    Point c = new Pont();
    int r;
} --> Circle이 Point를 포함한다.

class Car{
    Engine e = new Engine();
    Door[] d = new Door[4];
} --> 작은 단위 클래스 작성후, 조합하여 클래스 작성

포함(composite)이란 
1. 클래스의 멤버로 참조변수를 선언하는 것
2. 작은 단위의 클래스를 만들고, 이 들을 조합해서 클래스를 만든다.


ch7-5 단일 상속(Single lnheritance)
-> java는 단일 상속만을 허용한다.(c++은 다중상속 허용)
다중상속 방법
-> 비중이 높은 클래스 하나만 상속관계로, 
                           나머지는 포함관계로 한다

ch7-6 Object클래스 - 모든 클래스의 조상
-> 부모가 없는 클래스는 Object클래스를 상속받게 된다.
    -- class Tv extends Object{}//컴파일 자동추가
-> Object클래스의 메서드 사용가능

ch7-7 오버라이딩(overriding)__덮어쓰다.
-> 상속받은 조상의 메서드를 자신에 맞게 변경하는 것
     -- 메서드 호출은 오버라이딩 된 것을 출력해준다!!
-> 선언부는 변경불가! BUT 구현부는 변경가능!

오버라이딩의 조건
1. 선언부가 조상 클래스의 메서드와 일치해야 한다.
2. 접근 제어자를 조상 클래스의 메서드보다 좁은 범위로 변경안 됨.
3. 예외는 조상 클래스의 메서드보다 많이 선언할수 없다.
   --> 조상클래스를 선언한 예외보다 많으면 안된다.

ch7-9 오버로딩 VS 오버라이딩
1. 오버로딩 -> 기존에 없는 새로운 메서드 정의 (new)
2. 오버라이딩 -> 상속받은 메서드의 내용을 변경 (change, modify)


[오버라이딩]  void parentMethod(){}
[오버로딩]     void parentMethod(int i){}

[메소드 정의] void childMethod(){}
[오버로딩]     void childMethod(int i){}
[중복정의]     void childMethod(){}


접근제어자
1. public  2. protected, (default), private

객체 초기화
1. MyPoint p; 
   circle(){ p= new MyPoint(); }
2. System.out.println(p.toString()); or System.out.println(p);
   --> 오버라이딩 편



ch7-10 참조변수 super 
-> 참조변수 this와 유사(객체 자신을 가리키는 참조변수)
-> 인스턴스 메서드(생성자)내에만 존자
-> 조상의 멤버와 자신의 멤버와 구별하여 사용
    // 자기 멤버에는 this , 조상 멤버에는 super를 붙인다.
BUT 자손클래스내에 지역변수가 없다면, 멤버구분없이 조상꺼 출력


ch7-11 super()-조상과 생성자
1. 조상의 생성자를 호출할 때 사용
2. 조상의 멤버는 조상의 생성자를 호출해서 초기
    Point3D(int x, int y, in z){
        super(x, y); //조상은 조상님꺼는 조상이 하떼요!
        this.z = z;  //자손은 자손껏만 할거라구욧!!  }
{추가조건}
3. 생성자의 첫 줄에 반드시 생성자를 호출해야 한다.
    그렇지 않으면 생성자 첫 줄에 super()를 삽입할거야!!
    class Point extends Object{ int x; int y; }
           Point(){ this(0,0); }
           Point(int x, int y){ super();//Object  this.x=x;  this.y=y; }
// super()를 지키지 않으면 error가 나오기 때문입니다.
   1. super();  2. super(x,y)를 작성해보자!!



ch7-12 패키지(package)
-> 서로 관련된 클래스의 묶음
-> 클래스는 클래스 파일(*.class),
    패키지는 폴더.  하위 패키지는 하위 폴더
-> 클래스의 실제이름(full name)은 패키지를 포함


ch7-13 패키지의 선언__Package com.codechobo.book;
-> 패키지는 소스파일의 첫 번째 문장으로 단 한번 선언
-> 같은 소스 파일의 클래스들은 모두 같은 패키지에 속하게 된다.
-> 패키지 선언이 없으면, 이름없는(unnamed)패키지에 속하게 된다.


ch7-14 클래스 패스(classpath)
-> 클래스 파일(*.class)의 위치를 알려주는 경로(path)
-> 환경변수 classpath로 관리하며, 경로간의 구분자는 ';'를 사용
    classpath(환경변수)에 패키지의 루트를 등록해줘야 함.


C:\>java Ex7_1_1
p.x: 3
p.y: 5
p.z: 0
x: 3, y: 5, z: 0
x: 3, y: 5, z: 0, i: 0

C:\>set classpath
classpath=C:\Users\user\eclipse-workspace\ch07\bin



ch7-15 import문
-> 클래스를 사용할 때, 패키지이름을 생략할 수 있다.
-> 컴파일러에게 크래스가 속한 패키지를 알려준다.
-> java.lang패키지의 클래스는 import하지 않고도 사용할 수 있다.
-> import문은 패키지문과 클래스선언의 사이에 선언한다.

// import java.util.Date;
    class ImportTest{
          java.util.Date today = new java.util.Date()
    }

// import 패키지명.클래스명;  OR import 패키지먕.*;
// 1. 패키지 선언  2. import문   3.클래스 정의


ch7-15 import문의 선언
-> import문은 컴파일 시에 처리되므로 프로그램의 성능에 영향없음.
    -- String, Object, System, Thread ...
-> 다음의 두 코드는 서로 의미가 다르다.
-> 이름이 같은 클래스가 속한 두 패키지를 import할 때는
    클래스 앞에 피키지명을 붙여줘야 한다.


ch7-16 static import문
-> static멤버를 사용할 때, 클래스 이름을 생략할 수 있게 해준다.
System.out.println(Math.random()); <-> out.println(random());


ch7-17 제어자(modifier)__형용사
-> 클래스와 클래스의 멤버(멤버 변수, 메서드)에 부가적인 의미 부여
1. 접근 제어자 -- public, protected, (default), private
2. 그         외 -- static, final, abstract, native, transient, stricifp

-> 하나의 대상에 여러 제어자를 같이 사용가능(접근 제어자는 하나만)


ch7-18 static -- 클래스의, 공통적인
1. 멤버변수   2. 메서드에 사용될 수 있다.

ch7-19 final -- 마지막의, 변경될 수 없는
1. 클래스      2. 메서드   3. 멤버변수   4. 지역변수

ch7-20 abstract -- 추상의, 미완성의
1. 클래스       2. 메서드


ch7-21 접근 제어자(access modifier)
1. private      -> 같은 클래스
2. (default)    -> 같은 패키지
3. protected  -> 같은 패키지, 다른 패키지의 자손 클래스
4. public      ->  접근제한이 전혀 없다.



ch7-22 캡슐화와 접근 제어자
접근 제어자를 사용하는 이유 
1. 외부로부터 데이터를 보호하기 위해서__private과 if문 사용
2. 외부에는 불필요한, 내부적으로만 사용되는, 부분을 감추기 위해서
   __ 캡슐화(메서드를 통한 간접 접근)


public void setHour(int hour){
    if(isValidHour(hour)) return;
    
    this.hour = hour;
    }

    // 매개변수로 넘겨진 hour가 유효한지 확인해서 알려주는 메서드
    private boolean isValidHour(int hour){
        return hour < 0 || hour > 23;
    }

    public int getHour() { return hour; }



ch7-23 다형성(polymorphism)
-> 여러 가지 형태를 가질 수 있는 능력.
-> 조상타입 참조변수로 자손 타입 객체를 다루는 것.

polymorphism의 성질
-> 자손 타입의 참조변수로 조상 타입의 객체를 가리킬 수 없다.


ch7-24 참조변수의 형변환
-> 사용할 수 있는 멤버의 {갯수}를 조절하는 것
-> 조상 자손 관계의 참조변수는 서로 형 변환 가능
    // 형제 관계에서는 형 변환이 불가능하다.

FireEngine f = new FireEngine();
Car c = (Car)f;
FireEngine f2 = (FireEngine)c;
--> 메서드가 4개에서 5개가 되어 안전하지 않아 
     형 변환을 해줘야 해서 '생략이 불가능하다'
Ambulance a = (Ambulance)f;
// 이거 한번 그려볼까?
   야들야~ 예제7-7를 보자!!

FireEngine fe2 = (FireEngine)car;  //조상 -> 자손으로 형변환
Car car2 = (Car)fe2;                  // 자손 -> 조상으로 형변환
// 다시정리를 하면 형변환을 해도 형변환 에러가 일어나지 않는다.
    허나, 메소드를 사용시에는 에러가 나와 [객체]를 중심으로 보자!
--> 실체 객체에 따라 될지 안될지 모른다.
     객체가 4개인데, 메서드5개로 형변환이 불가능하다


ch7-26 instanceof 연산자
-> 참조변수의 형변환 가능여부 확인에 사용. 가능하면 true반환
-> 형변환 전에 반ㄷ시 instanceof로 확인해야 함.

void doWork(Car c){
    if(c instanceof FireEngine){           //1. 형변환이 가능한지 확인
        FireEngine fe = (FireEngine)c;    //2. 형변환
        fe.water();
    }
}

// 리모콘 바꾸어주기
FireEnfine f = new FireEngine();
Car c = (Car)f;


ch7-27 매개변수의 다형성
-> 참조형 매개변수는 메서드 호출시, 
    자신과 같은 타입 또는 자손타입의 인스턴스를 넘겨 줄 수 있다.

void buy(Product p){
    money -= p.price;
    bonusPoint += p.bonusPoint;
}

1. Product p = new Tv1();
2. b.buy(new Tv1( ));
3. b.buy(new Computer( ));
// 1번과 2번은 같다고 보면 됩니다!!!.


ch7-29 여러 종류의 객체를 배열로 다루기
-> 조상타입의 배열에 자손들의 객체를 담을 수 있다.

class Buyer2 { Product2[] cart = new Product2[10];}
Buyer2 b = new buyer2();
b.buy(new Tv2());
b.buy(new Computer2());
b.summary();


// 다형성 장점
1. 다형적 매개변수
2. 하나의 배열에 여러종류 객체 저장



ch7-31 추상클래스(abstract class)
-> 미완성 설계도. 미완성 메서드를 갖고 있는 클래스
-> 다른 클래스 작성에 도움을 주기 위한 것. 인스턴스 생성 불가
-> 상속을 통해 추상 메서드르 완성해야 인스턴스 생성가능


ch7-32 추상메서드(abstract method)
abstract 리턴타입 메서드이름();
-> 미완성 메서드. 구현부(몸통,{ })가 없는 메서드
-> 꼭 필요하지만 자손마다 다르게 구현될 것으로 예상되는 경우
-> 추상 메서드 호출 가능(호출할 때는 선언부만 필요)












