객체지향 언어
-> 코드의 재사용성이 높고,
    유지보수가 용이,
    중복 코드 제거

객체지향 언어
= 프로그래밍 언어 + 객체지향(개념)(규칙)


OOP
(object-orianted programming)
1. 캡슐화
2. 상속
3. 추상화
4. 다향성


클래스와 객체
객체의 구성요소 - 속성과 기능(1)
클래스의 정의 -> 클래스란 객체를 [정의]해 놓은 것
클래스의 용도 -> 클래스는 객체를 [생성]하는 데 사용


객체의 정의 -> 실제로 전재하는것. 사물 OR 개념
객체의 용도 -> 객체가 가지고 있는  
                     개능과 속성에 따라 다름.


// 클래스는 설계도
// 객체   는 제품


객체의 구성요소 - 속성과 기능(2)
-> HW가 SW화 된다??

// 객체 = 속성(변수) + 기능(메서드)
속성 : 크기, 길이, 높이
기능 : 졸륨낮추기, 음성키우기



객체와 인스턴스
객체       : 모든 인스턴스를 대표하는 일반적 용어
인스턴스 : 특정 클래스로부터 생성된 객체
              (EX: Tv인스턴스)


             인스턴스화
클래스 -------------------> 인스턴스(객체)

//  설계도  -> 제품생성 -> 제품사용
   (클래스)                      (객체)   



클래스와 객체
Q. 클래스가 왜 필요한가?
-> 객체를 생성하기 위해서

Q. 객체가 왜 필요한가?
-> 객체를 사용하기 위해서

Q. 객체를 사용한다는 것은?
-> 객체가 가진 속성과 기능을 사용하려고



한 파일에 여러 클래스 작성하기
1. 하나의 소스파일에 여러 클래스 작성.
-> 클래스(설계도)작성.

객체의 생성과 사용
1. 객체의 생성
클래스명 변수명;  변수명 = new 클래스명( );
// 변수명 : 참조변수, 참조변수와 객체와 연결!!

2. 객체의 사용
변수명.channel = 7;
변수명.channelDown( )  // 메서드 사용 호출;

[객체 생성의 순서] 및 [사용 순서]
// 클래스 작성 -> 객체 생성 -> 객체 사용!!
// Tv리모콘 -> t (연결) -> Tv객체


Tv t1 = new Tv( );
Tv t2 - new Tv( );
t2 = t1;
// 1개의 객체를 항하여 2개의 리모콘을 사용한다.


정리
: 하나의 인스턴스르 여러 개의 참조변수가 가리키는 경우
: 여러 인스턴스르 하나의 참조변수가 가리키는 경우



객체 배열
-> 객체 배열 == 참조변수 배열

Tv tv1, tv2, tv3 
->  Tv[] tvArr = { new Tv(), new Tv(), new Tv() }

Tv[] tvArr = new Tv[3];
-> tvArr[0] = new Tv( );
    tvArr[0] = new Tv( );
    tvArr[0] = new Tv( );
// 참조변수 배열 == 객체배열
   



















