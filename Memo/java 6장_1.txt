객체지향 언어
-> 코드의 재사용성이 높고,
    유지보수가 용이,
    중복 코드 제거

객체지향 언어
= 프로그래밍 언어 + 객체지향(개념)(규칙)


OOP
(object-orianted programming)
1. 캡슐화
2. 상속
3. 추상화
4. 다향성


클래스와 객체
객체의 구성요소 - 속성과 기능(1)
클래스의 정의 -> 클래스란 객체를 [정의]해 놓은 것
클래스의 용도 -> 클래스는 객체를 [생성]하는 데 사용


객체의 정의 -> 실제로 전재하는것. 사물 OR 개념
객체의 용도 -> 객체가 가지고 있는  
                     개능과 속성에 따라 다름.


// 클래스는 설계도
// 객체   는 제품


객체의 구성요소 - 속성과 기능(2)
-> HW가 SW화 된다??

// 객체 = 속성(변수) + 기능(메서드)
속성 : 크기, 길이, 높이
기능 : 졸륨낮추기, 음성키우기



객체와 인스턴스
객체       : 모든 인스턴스를 대표하는 일반적 용어
인스턴스 : 특정 클래스로부터 생성된 객체
              (EX: Tv인스턴스)


             인스턴스화
클래스 -------------------> 인스턴스(객체)

//  설계도  -> 제품생성 -> 제품사용
   (클래스)                      (객체)   



클래스와 객체
Q. 클래스가 왜 필요한가?
-> 객체를 생성하기 위해서

Q. 객체가 왜 필요한가?
-> 객체를 사용하기 위해서

Q. 객체를 사용한다는 것은?
-> 객체가 가진 속성과 기능을 사용하려고



한 파일에 여러 클래스 작성하기
1. 하나의 소스파일에 여러 클래스 작성.
-> 클래스(설계도)작성.

객체의 생성과 사용
1. 객체의 생성
클래스명 변수명;  변수명 = new 클래스명( );
// 변수명 : 참조변수, 참조변수와 객체와 연결!!

2. 객체의 사용
변수명.channel = 7;
변수명.channelDown( )  // 메서드 사용 호출;

[객체 생성의 순서] 및 [사용 순서]
// 클래스 작성 -> 객체 생성 -> 객체 사용!!
// Tv리모콘 -> t (연결) -> Tv객체


Tv t1 = new Tv( );
Tv t2 - new Tv( );
t2 = t1;
// 1개의 객체를 항하여 2개의 리모콘을 사용한다.


정리
: 하나의 인스턴스르 여러 개의 참조변수가 가리키는 경우
: 여러 인스턴스르 하나의 참조변수가 가리키는 경우



객체 배열
-> 객체 배열 == 참조변수 배열

Tv tv1, tv2, tv3 
->  Tv[] tvArr = { new Tv(), new Tv(), new Tv() }

Tv[] tvArr = new Tv[3];
-> tvArr[0] = new Tv( );
    tvArr[0] = new Tv( );
    tvArr[0] = new Tv( );
// 참조변수 배열 == 객체배열
   
//클래스
1. 설계도
2. 데이터 + 함수
3. 사용자 정의 타입

클래스의 정의(1)

데이터 + 함수
변수 -> 하나의 데이터를 저장할 수 있는 공간
배열 -> {같은 종류}의 여러 데이터를 
           하나로 저장할 수 있는 공간
구조체 -> 서로 관련된 여러 데이터(종류 관계 X)를
              하나로 저장할 수 있느 공간
클래스 -> 데이터와 함수의 결함
              (구조체 + 함수(메서드))
// 명령문 묶음


클래스의 정의(2)

사용자 정의 타입 - 원하는 타입을 직접 만들 수 있다.

class Time {int hour; int minute; int second;}

int hour; int minute; int second;
Time t = new Time()

time[] t = new Time[3];
t[0] = new Time( );
t[1] = new Time( );
t[2] = new Time( );

--> int[] hour = new int[3];


비 객체지향적인 코드
int hour = 12;
   객체지향 적인 코드
Time t = new Time( );
t.hour = 12;


선언 위치에 따른 변수의 종류
1. 클래스 영역 - iv( instant variable ) -> 인스턴스가 생성
                   - cv(  class variable  ) -> 클래스가 메모리 올리기
                   -> static변수, 공유변수
2. 메서드 영역 - lv( local variable )
                   -> 메서드 생성자, 초기화 블럭 내부

// 클래스영역 -> 선언문만 가능.


-> 객체는 iv를 묶어놓은 것이다.   -> 객체 생성시 만들어진다.!!
-> cv는 객체 생성이 필요하지 않는다.
-> iv는 객체 생성이 필요하다.! -


클래스 변수와 인스턴스 변수
선언 위치에 따라 변수의 이름이 달라진다.
1. 클래스 영역( iv, cv ) 2. 메서드 영역( lv )

인스턴스변수 -> {개별} 속성 -> static안 붙임.  == iv
클래스   변수 -> {공통} 속성 -> static 붙임      == cv


class Card{}

Card c = new Card( ); 
// 객체 생성.
c.kind = "HEART";
c.number = 5;
Card.width = 200; // cv는 클래스 이름을 써야 한다.
// 객체 사용.


메서드란? 메서드의 선언부와 구현부
1. 문장들을 묶어놓은것.  -> 블럭으로 묶어놓은 것??
   - 작업단위로 문당들의 묶어서 이름 붙인 것

public static void printArr(int[] numArr){ // 중복제거용?? // }
// 메서드 이름
printArr(numArr);
// 메서드 호출


메서드 란?
1. 문장들 묶은 것(작업단위)
2. 값(입력)을 받아서 처리하고, 결과를 반환(출력)
// 메서드는 클래스 안에 존재해야한다.
   함수는 클래스에 독립적이다. 
    -> 이런 제약이 있다//

메서드의 장점
1. 코드의 중복을 줄일 수 있다.
2. 코드의 관리가 쉽다.
3. 코드를 재사용할 수 있다.
4. 코드가 간결해서 이해하기 쉬워진다.

메서드의 작성
- 반복적으로 수행되는 여러 문장을 메서도로 작성.
- 하나의 메서드는 한 가지 기능만 수행하도록 작성.

{ 메서드 = 선언부 + 구현부 } //압축파일??
Ex> 
반환타입 메서드이름 (타입 변수명, 타입 변수명, ...) //선언부 
                                                             {  } //구현부

-> 배열초기화와 배열출력을 각각 만들어봅시다!!
-> 매개변수(입력) -- 작업에 필요한 값들 [목록]


메서드의 구현부
-> 지역변수(lv) : 메서드 내에 선언된 변수
==> {메서드 영역}


메서드의 호출, 메서드의 실행흐름

-> 메서드의 호출 : 메서드이름( 값1, 값2, ... );
                         작업에 필요한 값을 적어주자!
                         -> 매개변수(파라미터)

print99danAll( );
int result = add(3,5);



return문
-> 실행 중인 메서드를 종료하고 호출한 곳으로 되돌아간다.
-> void가 아니면 return문은 생략할 수 없습니다!
-> 만일 if문이 거짓일때는 return문이 없다고 한다.
    따라서 if문을 사용할 때, else문을 빠뜨리지 않게 주의하자!



호출 스택 ( call stack )
= 스택(stack) : 밑이 막힌 상자.  위에 차곡차곡 쌓인다.
-> 메서드 수행에 필요한 메모리가 제공되는 공간
-> 메서드가 호출되면 
    호출스택에 메모리 할당, 종료되면 해제 
// 아래 있는 메서드(main)가 위의 메서드를 호출한 것.
 


기본형 매개변수
기본형 매개변수 - 변수의 값을 읽기만 할 수 있다. 
                         -> (read only)
참조형 매개변수 - 변수의 값을 읽고 변경할 수 있다. 
                         -> (read & write))

// 이거는 플래쉬로 보는거 어때??



static메서드와 인스턴스 메서드

static메서드 -> 메서드 앞에 static이거 붙은 거
인스턴스 메서드 -> 메서드 앞에 아무것도 없는 것.

인스턴스 메서드
-> 인스턴스 생성 후, '참조변수.메서드이름( )'으로 호출
-> 인스턴스 멤버(iv, im)와 관련된 작업을 하는 메서드
-> 메서드 내에서 인스턴스 변수(iv) 사용가능

static메서드(클래스메서드)
-> 객체생성없이 '클래스이름.메서드이름()'으로 호출
-> 인스턴스 멤버(iv, im)와 관련없는 작업을 하는 메서드
-> 메서드 내에서 인스턴스 변수(iv) 사용불가


ㅇㅇㅇㅇ










