java의 정석 기초편__6장

객체지향 언어
-> 80년 초 소프트웨어의 위기 - 빠른 변화를 못쫒아감

해결책으로객체지향 언어를 도입 (절차적 -> 객체지향)
-> 코드의 재사용성이 높고 유지보수가 용이,
    중복 코드 제거

객체지향언어 
= 프로그래밍 언어 + 객체지향개념(규칙)

OOP의 핵심기능
1. 캡슐화
2. 상속
3. 추상화
4. 다형성


Q. 객체지향 개념은 어떻게 공부해야 하나요?
-> 6장과 7장의 다형성 개념을 완벽하게 이해하고
    넘어가자!!




클래스와 객체

클래스의 정의 -> 클래스란 {객체를 정의}해 놓은 것
클래스의 용도 -> 클래스는 {객체를 생성}하는 데 사용

객체의 정의 -> 실제로 존재하는 것.
                     사물 OR 개념
객체의 용도 -> 객체가 가지고 있는 
                    기능과 속성에 따라 다름

// 클래스 -> 제품 설계도, TV설계도, 붕어빵 기계
    객체   -> 제품, TV, 붕어빵   

객체의 구성요소 -- 속성과 기능

객체지향개념 -> 하드웨어를 소프트웨어화 하는 것
-- (하드웨어)
   분석과 관찰을 진행. 
->(소프트웨어) 
   소프트웨어화 되어 컴퓨터 안에서 실행되게 하는 것.

// 소프트웨어 == "code"로 프로그램으로 만드는 것.
// 객체 = 속성(변수) + 기능(메서드)
Ex> 속성 = 크기, 길이, 높이, 색상, 볼륨, 채널 등
      기능 = 볼륨 뫂이기, 채널 변경하기 등등

code로는 [속성은 {변수}], [기능은 {메서드}]

변수 -> String color;  boolean power;
메서드 -> void power( ){ }, void channeUp( ){ }
// TV 설계도


객체와 인스턴스
객체 : 모든 인스턴스를 대표하는 {일반적} 용어
인스턴스 : 측정 클래스로부터 {생성된 객체}
              Ex(Tv인스턴스)
// 거의 같은 말이다!!

             인스턴스화(제품 생성)
클래스 ----------------------------> 인스턴스(객체)
                                             // 제품 사용!!



클래스와 객체
Q. 클래스가 왜 필요한가?
객체를 생성하기 위해서
-> 제품을 만들기 위해서
-> 클래스는 설계도이다.

Q.객체가 왜 필요한가?
객체를 사용하기 위해서
-> 객체는 제품이다.
-> 왜 필요해서 사용하려고

Q.객체를 사용한다는 것은?
객체가 가진 속성과 가능을 사용하려고
-> 속성은 변수이다.
-> 기능은 메서드이다.



[ 한 파일에 여러 클래스 작성하기 ]

하나의 소스파일에 여러 클래스 작성
1. public class가 있는 경우,
   소스파일의 이름은 반드시 
   public class의 이름과 일치해야 한다.

2. public class가 하나도 없는 경우,
   소스파일의 이름은 모두 가능합니다.

잘못된 작성 예
1. 하나의 소스파일에는 1개의 
    public class만 있어야 함.
2. 소스파일의 이름이 
   public class의 이름과 일치하지 않음.
3. 소스파일의 이름이 
   대소문자 구분하기에 
   public class의 이름과 일치하지 않음.


객체의 생성과 사용
1. 객체의 생성
클래스명 변수명;
변수명 = new 클래스명( );

TV t;  //참조변수(리모콘)
t = new Tv( ); 
// 객체를 다루기 위해 참조변수 필요
==> 참조변수와 객체끼리 연결...

Tv t = new Tv( );

2. 객체의 사용
t.channel = 7;         // 변수
t.channelDown( );     // 메서드
System.out.println
       ("현재 채널은 " + t.channel + " 입니다.");



객체의 생성과 사용

Tv t = new Tv( );
// Tv라는 제품으로 t로 대입을 해주는 것이다!!
// 객체가 Tv이니까 Tv리모콘이 필요하다.
// 구성요소 = 변수 + 메서드

Ex1 >
Tv t1 = new Tv( );
Tv t2 = new Tv( );
// t2 = t1; 
--> 리모콘이 없어졌어요!! 
     단 t1의 객체를 가리켰어요!!
t1.channel = 7;

t2 = t1이 된 경우,
-> GC 가비지 컬렉터에서 [청소부] 삭제를 해준다.!!

// 하나의 인스턴스를 여러 개의 참조변수가 
    가리키는 경우(가능)
// 여러 인스턴스를 하나의 탐조변수가
    가리키는 경우(불가능)



객제 배열
--> 객체 배열 == 참조변수 배열

Tv t1 = new Tv();
Tv t2 = new Tv();
Tv t3 = new Tv();

Tv[] tvArr = new Tv[3];
tvArr[0] = new Tv( );
tvArr[1] = new Tv( );
tvArr[2] = new Tv( );
// 객체를배열화 하는 방법을 말하는 것이다!



ㅇㅇㅇ












