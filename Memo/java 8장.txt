{ 프로그램 오류, 예외 클래스의 계층 구조 }

프로그램 오류
1. 컴파일 에러(compile-time error) -> 컴파일 할 때 발생하는 에러
2. 런타임 에러(runtime error) -> 실행 할 때 발생하는 에러
3. 논리적 에러(logical error) -> 작성 의도와 다르게 동작

public class ExceptionTest{
    public static void main(String[] args){
        System.out.println(args[0]);
    }
}


-> Java의 런타임 에러
1. 에러(error) 
   -- 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
2. 예외(exception) 
   -- 프로그램 코드에 의해서 수습될 수 있는 미약한 오류

-> 예외처리의 정의와 목적
예외처리(exception handling)의 
정의 -- 프로그램 실행 시 발생할 수 있는 예외의 발생에 
          대비한 코드를 작성하는 것.
목적 -- 프로그램의 비정상 종료를 막고, 
          정상적인 실행상태를 유지하는 것.


예외 클래스의 계층구조

Object -- throwable -- Exception -- RuntimeException
                                           -- ...
                                           -- IOException

                          -- Error        -- ...
                                           -- OutOfMemoryError

// Error -> 심각한 오류..  ,  Exception -> 미약한 오류..


Exception과 RuntimeException
-> Exception클래스들 
    -- 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
-> RuntimeException클래스들
    -- 프로그래머의 실수로 발생하는 예외


{ 예외 처리하기 try-catch문의 흐름 }
프로그램 오류
1. 컴파일 에러
2. 런타임 에러 - Error : 심각한 에러 , Exception : 미약한 에러
3. 논리적 에러

예외처리(exception handling)의 정의 및 목적
1. 정의 -> 프로그램 실행 시 발생할 수 있는 
              예외의 발생에 대비한 코드를 작성하는 것
2. 목적 -> 프로그램의 비정상 종료를 막고,
             정상적인 실행상태를 유지하는 것
try블럭이나 catch블럭 내에 포함된 문장이 하나뿐이어도
괄호{ }를 생략할 수 없다.


-> 예외가 발생하면, 이를 처리할 catch블럭을 찾아 내려감.


ㅇㅇㅇㅇㅇㅇㅇ


















