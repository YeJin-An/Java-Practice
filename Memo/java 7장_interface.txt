ch6-39  
{ 인터페이스의 장점(1) }
-> 두 대상(객체)간의 '연결, 대화, 소통'을 돕는 '중간 역할'을 한다.
interface = inter(~사이) + face(대상)
--> 어떤 두 대상 사이에 '중간 역할'


//인터페이스의 장점
1. 두 대상(객체)간의 '연결, 대화, 소통'을 돕는 '중간 역할'을 한다.
2. 선언(설계)와 구현을 분리시킬 수 있게 한다.
   -> 껍데기와 알멍이를 분리시킬 수 있게 한다.
3. 인터페이스 덕분에 B가 변경되어도 A는 안바꿀 수 있다.
    (느슨한 결합)

class B{
    public void method(){
        System.out.println("methodInB");
    }
}

interface I {
    public void method();
}

class B implements I {
    public void method(){
        System.out.println("methodInB");
    }
}
// 인터페이스 새로 정의 및 구현하는 것.


class A {public void method(B b){b.method();}}
// 인터페이스 B를 구현한 넘들만 들어와라!!

interface I {public void method();}            //method()의 선언
class B implements I 
{public void method()
{System.out.println("B클래스의 메서드")}}   //method()의 구현

public class InterfaceTest{
    public static void main(String[] args){
        A a = new A();
        a.method(newC());    // A가 C를 사용(의존)
    }
}


// 껍데기(추상메서드 집합) , 추상메서드 호출가능.
{ 인터페이스의 장점(2) }
-> 개발 시간을 단축할 수 있다.
-> 변경에 유리한 유연난 설계가 가능하다.
-> 표준화가 가능하다.
    // JDBC == 인터페이스 집합!!
-> 서로 관계없는 클래스들을 관계를 맺어줄 수 있다.
Ex> 인터페이스 구현!!???
interface Repairable(){}
class SCV extends GroundUnit implements Repairable{}
class Tank extends GroundUnit implements Repairable{}
class Dropship extends AirUnit implements Repairable{}
// 자손이 아닌 {관계없는 클래스들을 관계에 맺어줄 수 있다.}


오버로딩이란?
같은 이름 메서드 = void repair(Tank t){}, void repair(Dropship d){}
다형성, 추상화, 인터페이스  // 매우매우 중요합니다!!!!

인터페이스이란?
추상 메서드의 집합니다.

{ 디폴트 메서드와 static메서드 }
-> 인터페이스에 디폴트 메서드, static메서드 추가가능.
     // JDK1.8부터__ 원래는 인터페이스 추상메서도만 가질 수 있었다.

-> 인터페이스에 새로운 메서드(추상 메서드)를 추가하기 어려움.
    해결책 => 디폴트 메서드(default method)

-> 디폴트 메서드는 인스턴스 메서드(인터페이스 원칙 위반)
interface MyInterface{
    void method();
    default void newMethod(){}
}  //인터페이스 윈칙 위반__예외사항 입니다!

-> 디폴트 메서드가 메서드가 기존의 메서드와 충돌할 때의 해결책
1) 여러 인터페이스의 디폴트 메서드 간의 충돌
    -- 인터페이스를 구현한 클래스에서 디폴트 메서드를 
       오버라이딩 해야 한다.
2) 디폴트 메서드와 조상 클래스의 메서드 간의 충돌
    -- 조상 클래스의 메서드가 상속되고, 디폴트는 무시된다.




ch7-42 내부 클래스(inner class)
-> 클래스 안의 클래스

내부 클래스의 장점
-> 내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다.
-> 코드의 복잡성을 줄일 수 있다. (캡슐화)


class AAA{
    int i = 100;
    BBB b = new BBB();

    class BBB{
        void method(){
            System,out.println(i);
        }
    }
}


내부 클래스의 종류와 특징
-> 내부 클래스의 종류와 유효범위(scope)는 변수와 동일


1. 인스턴스 내부 클래스   -> class InstanceInner{}
2. 스태틱 내부 클래스      -> static class StaticInner{}
3. 지역 내부 클래스         -> void mymethod(){ int lv = 0; }
4. 익명 클래그


{ 내부 클래스의 제어자와 접근성 }
-> 내부 클래스의 제어자는 변수에 사용 가능한 제어자와 동일

class Outer{
    private int iv = 0;
    protected static int cv = 0;
    
    void myMethod(){ int lv = 0; }
}

class Outer{
    private class InstanceInner{}
    protected static class StaticInner{}
    void myMthod(){ class LocalInner{} }
}

Ex>
class Ex7_12{
    class InstanceInner{}        // 인스턴스 내부 클래스
    static class StaticInner{}   // static 내부 클래스 
    void myMethod(){}         // 지역 내부 클래스
} // static클래스만 static멤버만 정의 할 수 있다.


예제 7-12

class InstanceInner{
    int iv = 100;
    final static int CONST = 100;
}

static class StaticInner{
    int iv = 200;
    static int cv = 200;
}

void myMethd(){
    class LocalInner{
        int iv = 300;
        final static int CONST = 300;
    }
}

public static void main(String args[]){
    System.out.println(InstanceInner.CONST);
    System.out.println(StaticInner.cv);
    System.out.println(LocalInner.CONST);  //이것은 사용 불가능!
    --> 내부클래스는 메서드 안에서만 사용이 가능하기 때문이다.
    // 에러. 지녁 내부 클래스는 메서드 내에서만 실행 가능!!!
}


// 다시 정리
인스턴스 멤버가 static멤버로 사용가능.
static멤버는 인스턴스 멤버로 사용 불가능.
--> static 클래스에서 인스턴스 멤버로 가리킬 수 없음.


EX>
내부클래스는 외부 클래스의 private멤버도 접근가능하다!!
// 상수는 따로 관리하기 때문에,
    메소드가 종료되어도 상수는 사용할 수 있다.



ch7-49 내부 클래스의 제어자와 접근성
// 외부 클래스의 인스턴스를 먼저 생성
// 인스턴스를 생성 가능
// static 내부 클래스의 인스턴스는 외부 클래스를 먼저
    생성하지 않아도 된다.

class Outer3{
    int value = 10;

    class Inner{
        int value = 20;
 
        void method1(){
            int value = 30;
            System.out.println(value);                 //외부클래스의 iv
            System.out.println(this.value);            //내부클래스의 iv
            System.out.println(Outer3.this.value);   // lv
        }
    }
}



{ 익명클래스 }
익명 클래스(anonymous class)
-> 이름이 없는 일회용 클래스.  정의와 생성을 동시에

new 조상클래스이름(){ //멤버 선언 }
new 구현인터페이스이름(){ //멤버 선언 }

// 익명클래스는 일회성이다.!! 
    -> 정의와 생성을 한번에 한다.
b.addActionListener(new ActionListener());
익명클래스 바꾸기
b.addActionListener(new ActionListener()
                              {이 안에 객체 및 함수 생성});
{이 안에 함수를 넣기!!}







